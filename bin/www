#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config();

checkEnvVars();

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
const { purgeUsers } = require("../util/index");
const CronJob = require('cron').CronJob;

const job = new CronJob(
  '0 0 3 * * *', // cronTime
  function () {
    console.log('Time to purge!');
    purgeUsers()
  }, // onTick
  null, // onComplete
  true, // start
);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function checkEnvVars() {
  let ENV_VARS = [
    { var: process.env.CORS_HOST, name: 'CORS_HOST' },
    { var: process.env.THIS_SERVER, name: 'THIS_SERVER' },
    { var: process.env.DB_NAME, name: 'DB_NAME' },
    { var: process.env.DB_USER, name: 'DB_USER' },
    { var: process.env.DB_PASS, name: 'DB_PASS' },
    { var: process.env.DB_HOST, name: 'DB_HOST' },
    { var: process.env.SHEETS_ID, name: 'SHEETS_ID' },
    { var: process.env.SHEETS_URL, name: 'SHEETS_URL' },
    { var: process.env.SHEETS_EMAIL, name: 'SHEETS_EMAIL' },
    { var: process.env.SHEETS_KEY, name: 'SHEETS_KEY' },
    { var: process.env.XBOT_SERVER, name: 'XBOT_SERVER' },
  ]

  let allTheEnvVars = "";
  let problems = false;

  ENV_VARS.forEach(envObject => {
    allTheEnvVars += envObject.name + ", ";
    if (!envObject.var) {
      problems = true;
      console.log(`${envObject.name} env var is missing!`);
    }
  });
  allTheEnvVars = allTheEnvVars.substring(0, allTheEnvVars.lastIndexOf(","));
  if (problems) {
    console.log("ABORTING!");
    console.log("You need to set the following enviroment variables: " + allTheEnvVars);
    process.exit();
  }
}