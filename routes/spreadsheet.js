const express = require('express');
const router = express.Router();
const { GoogleSpreadsheet } = require('google-spreadsheet');
const { JWT } = require('google-auth-library');
const fs = require("fs");
const path = require("path");
const { dbSetClient, dbFind, dbInsert, dbSetName, dbUpdate } = require("../db/dbOperations");

// // spreadsheet url: 
const sheetUrl = process.env.SHEETS_URL;

// router.post("/", async (req, res) => {
//     const data = req.body;
//     let response = {};
// });

router.post("/", async (req, res) => {
    let data = req.body;
    //TODO this data should be stringified apparently
    console.log(JSON.stringify(data));
    // const name = "Alejandro";
    // const names = [{ Nationality: "Armenia", Equivalent: "Ale" }, { Nationality: "Italy", Equivalent: "Alessandro" }, { Nationality: "Brasil", Equivalent: "Aleao" }];
    if (data.name && data.names && data.userId) {
        try {
            let spObject = await createSpreadSheet(data.name, data.names);
            //we gota record the spObject.sheetUrl into the db for this user
            const updateResult = await dbUpdate("users", { userId: Number(data.userId) }, { "spreadSheet": true });
            console.log(updateResult);
            res.status(200).write("OK!");
        }
        catch (error) {
            console.log("/spreadsheet error: ", error.message);
            res.status(200).write("NOT OK");
        }
    }
    else {
        res.status(200).write("NOT OK - need name && names");
    }
    res.end();

});

async function createSpreadSheet(name) {
    // Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
    // const privateKey = fs.readFileSync(path.resolve(__dirname, "../data/key"), "utf8");
    // const privateKey = process.env.SHEETS_KEY;
    const serviceAccountAuth = new JWT({
        // env var values here are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        email: process.env.SHEETS_EMAIL,
        key: process.env.SHEETS_KEY,
        scopes: [
            'https://www.googleapis.com/auth/spreadsheets',
        ],
    });

    const doc = new GoogleSpreadsheet('1VS0qw5cvPcOhOUp_qvLnwAjLtVw3TJrunubbPihEyZQ', serviceAccountAuth);

    await doc.loadInfo(); // loads document properties and worksheets

    console.log("doc.title->", doc.title);

    // await doc.updateProperties({ title: 'renamed doc' });

    // const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`

    // first determine which the name for the new sheet will be
    let sheets = await doc.sheetsByTitle;

    let desiredTitle = name;
    let newTitle = desiredTitle;

    let counter = 0;

    while (sheets[newTitle]) {
        counter++;
        newTitle = desiredTitle + "-" + counter;
    }

    const newSheet = await doc.addSheet({ title: newTitle, headerValues: ['Nationality', 'Equivalent'] });

    await newSheet.addRows(names);

    let spObject = {};
    spObject.success = true;
    spObject.sheetUrl = sheetUrl + "#gid=" + await findSheetId(newTitle, doc);
    return spObject;
}

const name = "Alejandro";
const names = [{ Nationality: "Armenia", Equivalent: "Ale" }, { Nationality: "Italy", Equivalent: "Alessandro" }, { Nationality: "Brasil", Equivalent: "Aleao" }];

async function findSheetId(targetSheet, doc) {
    let sheets = await doc.sheetsByTitle;
    return sheets[targetSheet].sheetId;
}

module.exports = router;